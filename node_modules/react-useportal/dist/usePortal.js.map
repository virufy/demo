{"version":3,"file":"usePortal.js","sourceRoot":"","sources":["../usePortal.ts"],"names":[],"mappings":"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","sourcesContent":["import { useState, useRef, useEffect, useCallback, useMemo, ReactNode, DOMAttributes, SyntheticEvent, MutableRefObject, MouseEvent } from 'react'\nimport { createPortal, findDOMNode } from 'react-dom'\nimport useSSR from 'use-ssr'\n\ntype HTMLElRef = MutableRefObject<HTMLElement>\ntype CustomEvent = {\n  event?: SyntheticEvent<any, Event>\n  portal: HTMLElRef\n  targetEl: HTMLElRef\n} & SyntheticEvent<any, Event>\n\ntype CustomEventHandler = (customEvent: CustomEvent) => void\ntype CustomEventHandlers = {\n  [K in keyof DOMAttributes<K>]?: CustomEventHandler\n}\n\ntype EventListenerMap = { [K in keyof DOMAttributes<K>]: keyof GlobalEventHandlersEventMap }\ntype EventListenersRef = MutableRefObject<{\n  [K in keyof DOMAttributes<K>]?: (event: SyntheticEvent<any, Event>) => void\n}>\n\nexport type UsePortalOptions = {\n  closeOnOutsideClick?: boolean\n  closeOnEsc?: boolean\n  bindTo?: HTMLElement // attach the portal to this node in the DOM\n  isOpen?: boolean\n  onOpen?: CustomEventHandler\n  onClose?: CustomEventHandler\n  onPortalClick?: CustomEventHandler\n  programmaticallyOpen?: boolean\n} & CustomEventHandlers\n\ntype UsePortalObjectReturn = {} // TODO\ntype UsePortalArrayReturn = [] // TODO\n\nexport const errorMessage1 = 'You must either add a `ref` to the element you are interacting with or pass an `event` to openPortal(e) or togglePortal(e) when the `programmaticallyOpen` option is not set to `true`.'\n\nexport default function usePortal({\n  closeOnOutsideClick = true,\n  closeOnEsc = true,\n  bindTo, // attach the portal to this node in the DOM\n  isOpen: defaultIsOpen = false,\n  onOpen,\n  onClose,\n  onPortalClick,\n  programmaticallyOpen = false,\n  ...eventHandlers\n}: UsePortalOptions = {}): any {\n  const { isServer, isBrowser } = useSSR()\n  const [isOpen, makeOpen] = useState(defaultIsOpen)\n  // we use this ref because `isOpen` is stale for handleOutsideMouseClick\n  const open = useRef(isOpen)\n\n  const setOpen = useCallback((v: boolean) => {\n    // workaround to not have stale `isOpen` in the handleOutsideMouseClick\n    open.current = v\n    makeOpen(v)\n  }, [])\n\n  const targetEl = useRef() as HTMLElRef // this is the element you are clicking/hovering/whatever, to trigger opening the portal\n  const portal = useRef(isBrowser ? document.createElement('div') : null) as HTMLElRef\n\n  useEffect(() => {\n    if (isBrowser && !portal.current) portal.current = document.createElement('div')\n  }, [isBrowser, portal])\n\n  const elToMountTo = useMemo(() => {\n    if (isServer) return\n    return (bindTo && findDOMNode(bindTo)) || document.body\n  }, [isServer, bindTo])\n\n  const createCustomEvent = (e: any) => {\n    if (!e) return { portal, targetEl, event: e }\n    const event = e || {}\n    if (event.persist) event.persist()\n    event.portal = portal\n    event.targetEl = targetEl\n    event.event = e\n    const { currentTarget } = e\n    if (!targetEl.current && currentTarget && currentTarget !== document) targetEl.current = event.currentTarget\n    return event\n  }\n\n  // this should handle all eventHandlers like onClick, onMouseOver, etc. passed into the config\n  const customEventHandlers: CustomEventHandlers = Object\n    .entries(eventHandlers)\n    .reduce<any>((acc, [handlerName, eventHandler]) => {\n      acc[handlerName] = (event?: SyntheticEvent<any, Event>) => {\n        if (isServer) return\n        eventHandler(createCustomEvent(event))\n      }\n      return acc\n    }, {})\n\n  const openPortal = useCallback((e: any) => {\n    if (isServer) return\n    const customEvent = createCustomEvent(e)\n    // for some reason, when we don't have the event argument, there\n    // is a weird race condition. Would like to see if we can remove\n    // setTimeout, but for now this works\n    if (targetEl.current == null && !programmaticallyOpen) {\n      setTimeout(() => setOpen(true), 0)\n      throw Error(errorMessage1)\n    }\n    if (onOpen) onOpen(customEvent)\n    setOpen(true)\n  }, [isServer, portal, setOpen, targetEl, onOpen])\n\n  const closePortal = useCallback((e: any) => {\n    if (isServer) return\n    const customEvent = createCustomEvent(e)\n    if (onClose && open.current) onClose(customEvent)\n    if (open.current) setOpen(false)\n  }, [isServer, onClose, setOpen])\n\n  const togglePortal = useCallback((e: SyntheticEvent<any, Event>): void => \n    open.current ? closePortal(e) : openPortal(e),\n    [closePortal, openPortal]\n  )\n\n  const handleKeydown = useCallback((e: KeyboardEvent): void => \n    (e.key === 'Escape' && closeOnEsc) ? closePortal(e) : undefined,\n    [closeOnEsc, closePortal]\n  )\n\n  const handleOutsideMouseClick = useCallback((e: MouseEvent): void => {\n    const containsTarget = (target: HTMLElRef) => target.current.contains(e.target as HTMLElement)\n    // There might not be a targetEl if the portal was opened programmatically.\n    if (containsTarget(portal) || (e as any).button !== 0 || !open.current || (targetEl.current && containsTarget(targetEl))) return\n    if (closeOnOutsideClick) closePortal(e)\n  }, [isServer, closePortal, closeOnOutsideClick, portal])\n\n  const handleMouseDown = useCallback((e: MouseEvent): void => {\n    if (isServer || !(portal.current instanceof HTMLElement)) return\n    const customEvent = createCustomEvent(e)\n    if (portal.current.contains(customEvent.target as HTMLElement) && onPortalClick) onPortalClick(customEvent)\n    handleOutsideMouseClick(e)\n  }, [handleOutsideMouseClick])\n\n  // used to remove the event listeners on unmount\n  const eventListeners = useRef({}) as EventListenersRef\n\n  useEffect(() => {\n    if (isServer) return\n    if (!(elToMountTo instanceof HTMLElement) || !(portal.current instanceof HTMLElement)) return\n\n    // TODO: eventually will need to figure out a better solution for this.\n    // Surely we can find a way to map onScroll/onWheel -> scroll/wheel better,\n    // but for all other event handlers. For now this works.\n    const eventHandlerMap: EventListenerMap = {\n      onScroll: 'scroll',\n      onWheel: 'wheel',\n    }\n    const node = portal.current\n    elToMountTo.appendChild(portal.current)\n    // handles all special case handlers. Currently only onScroll and onWheel\n    Object.entries(eventHandlerMap).forEach(([handlerName /* onScroll */, eventListenerName /* scroll */]) => {\n      if (!eventHandlers[handlerName as keyof EventListenerMap]) return\n      eventListeners.current[handlerName as keyof EventListenerMap] = (e: any) => (eventHandlers[handlerName as keyof EventListenerMap] as any)(createCustomEvent(e))\n      document.addEventListener(eventListenerName as keyof GlobalEventHandlersEventMap, eventListeners.current[handlerName as keyof EventListenerMap] as any)\n    })\n    document.addEventListener('keydown', handleKeydown)\n    document.addEventListener('mousedown', handleMouseDown as any)\n\n    return () => {\n      // handles all special case handlers. Currently only onScroll and onWheel\n      Object.entries(eventHandlerMap).forEach(([handlerName, eventListenerName]) => {\n        if (!eventHandlers[handlerName as keyof EventListenerMap]) return\n        document.removeEventListener(eventListenerName as keyof GlobalEventHandlersEventMap, eventListeners.current[handlerName as keyof EventListenerMap] as any)\n        delete eventListeners.current[handlerName as keyof EventListenerMap]\n      })\n      document.removeEventListener('keydown', handleKeydown)\n      document.removeEventListener('mousedown', handleMouseDown as any)\n      elToMountTo.removeChild(node)\n    }\n  }, [isServer, handleOutsideMouseClick, handleKeydown, elToMountTo, portal])\n\n  const Portal = useCallback(({ children }: { children: ReactNode }) => {\n    if (portal.current != null) return createPortal(children, portal.current)\n    return null\n  }, [portal])\n\n  return Object.assign(\n    [openPortal, closePortal, open.current, Portal, togglePortal, targetEl, portal],\n    {\n      isOpen: open.current,\n      openPortal,\n      ref: targetEl,\n      closePortal,\n      togglePortal,\n      Portal,\n      portalRef: portal,\n      ...customEventHandlers,\n      bind: { // used if you want to spread all html attributes onto the target element\n        ref: targetEl,\n        ...customEventHandlers\n      }\n    }\n  )\n}\n"]}